#!/usr/bin/env python3
"""
Test d'int√©gration finale MVC WakeDock
"""

import sys
import asyncio
import traceback
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

print("üöÄ D√âMARRAGE DES TESTS D'INT√âGRATION MVC WAKEDOCK")
print("=" * 60)

# Test 1: Imports des mod√®les
print("\n1Ô∏è‚É£ Test des imports des mod√®les...")
try:
    from wakedock.models.base import BaseModel, AuditableModel
    print("‚úÖ Base models OK")
    
    from wakedock.models.alerts_models import Alert, AlertRule
    print("‚úÖ Alerts models OK")
    
    from wakedock.models.containers_models import Container, ContainerStack
    print("‚úÖ Containers models OK")
    
    from wakedock.models.authentication_models import User, Role
    print("‚úÖ Authentication models OK")
    
    from wakedock.models.dashboard_models import Dashboard, Widget
    print("‚úÖ Dashboard models OK")
    
    from wakedock.models.analytics_models import Metric, MetricData
    print("‚úÖ Analytics models OK")
    
    models_success = True
except Exception as e:
    print(f"‚ùå Erreur imports mod√®les: {e}")
    models_success = False

# Test 2: Imports de la base de donn√©es
print("\n2Ô∏è‚É£ Test des imports de la base de donn√©es...")
try:
    from wakedock.core.database import Base, get_db, AsyncSessionLocal
    print("‚úÖ Database core OK")
    db_success = True
except Exception as e:
    print(f"‚ùå Erreur database: {e}")
    db_success = False

# Test 3: Imports des serializers
print("\n3Ô∏è‚É£ Test des imports des serializers...")
try:
    from wakedock.serializers.alerts_serializers import CreateAlertRequest
    print("‚úÖ Alerts serializers OK")
    
    from wakedock.serializers.containers_serializers import CreateContainerRequest
    print("‚úÖ Containers serializers OK")
    
    from wakedock.serializers.authentication_serializers import RegisterRequest
    print("‚úÖ Authentication serializers OK")
    
    from wakedock.serializers.dashboard_serializers import CreateDashboardRequest
    print("‚úÖ Dashboard serializers OK")
    
    from wakedock.serializers.analytics_serializers import CreateMetricRequest
    print("‚úÖ Analytics serializers OK")
    
    serializers_success = True
except Exception as e:
    print(f"‚ùå Erreur serializers: {e}")
    serializers_success = False

# Test 4: Imports des repositories
print("\n4Ô∏è‚É£ Test des imports des repositories...")
try:
    from wakedock.repositories.alerts_repository import AlertsRepository
    print("‚úÖ Alerts repository OK")
    
    from wakedock.repositories.containers_repository import ContainersRepository
    print("‚úÖ Containers repository OK")
    
    from wakedock.repositories.authentication_repository import AuthenticationRepository
    print("‚úÖ Authentication repository OK")
    
    from wakedock.repositories.dashboard_repository import DashboardRepository
    print("‚úÖ Dashboard repository OK")
    
    from wakedock.repositories.analytics_repository import AnalyticsRepository
    print("‚úÖ Analytics repository OK")
    
    repositories_success = True
except Exception as e:
    print(f"‚ùå Erreur repositories: {e}")
    repositories_success = False

# Test 5: Imports des services
print("\n5Ô∏è‚É£ Test des imports des services...")
try:
    from wakedock.services.alerts_service import AlertsService
    print("‚úÖ Alerts service OK")
    
    from wakedock.services.containers_service import ContainersService
    print("‚úÖ Containers service OK")
    
    from wakedock.services.authentication_service import AuthenticationService
    print("‚úÖ Authentication service OK")
    
    from wakedock.services.dashboard_service import DashboardService
    print("‚úÖ Dashboard service OK")
    
    from wakedock.services.analytics_service import AnalyticsService
    print("‚úÖ Analytics service OK")
    
    services_success = True
except Exception as e:
    print(f"‚ùå Erreur services: {e}")
    services_success = False

# Test 6: Imports des controllers
print("\n6Ô∏è‚É£ Test des imports des controllers...")
try:
    from wakedock.controllers.alerts_controller import AlertsController
    print("‚úÖ Alerts controller OK")
    
    from wakedock.controllers.containers_controller import ContainersController
    print("‚úÖ Containers controller OK")
    
    from wakedock.controllers.authentication_controller import AuthenticationController
    print("‚úÖ Authentication controller OK")
    
    from wakedock.controllers.dashboard_controller import DashboardController
    print("‚úÖ Dashboard controller OK")
    
    from wakedock.controllers.analytics_controller import AnalyticsController
    print("‚úÖ Analytics controller OK")
    
    controllers_success = True
except Exception as e:
    print(f"‚ùå Erreur controllers: {e}")
    controllers_success = False

# Test 7: Imports des routes
print("\n7Ô∏è‚É£ Test des imports des routes...")
try:
    from wakedock.routes.alerts_routes import router as alerts_router
    print("‚úÖ Alerts routes OK")
    
    from wakedock.routes.containers_routes import router as containers_router
    print("‚úÖ Containers routes OK")
    
    from wakedock.routes.authentication_routes import router as auth_router
    print("‚úÖ Authentication routes OK")
    
    from wakedock.routes.dashboard_routes import router as dashboard_router
    print("‚úÖ Dashboard routes OK")
    
    from wakedock.routes.analytics_routes import router as analytics_router
    print("‚úÖ Analytics routes OK")
    
    routes_success = True
except Exception as e:
    print(f"‚ùå Erreur routes: {e}")
    routes_success = False

# R√©sum√© final
print("\n" + "=" * 60)
print("üìä R√âSUM√â DES TESTS D'INT√âGRATION MVC")
print("=" * 60)

tests = [
    ("Mod√®les", models_success),
    ("Base de donn√©es", db_success),
    ("Serializers", serializers_success),
    ("Repositories", repositories_success),
    ("Services", services_success),
    ("Controllers", controllers_success),
    ("Routes", routes_success)
]

successful_tests = 0
total_tests = len(tests)

for test_name, success in tests:
    status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
    print(f"{test_name:<20} {status}")
    if success:
        successful_tests += 1

print("\n" + "=" * 60)
print(f"üéØ R√âSULTAT FINAL: {successful_tests}/{total_tests} tests r√©ussis")
print(f"üìà Taux de r√©ussite: {(successful_tests/total_tests)*100:.1f}%")

if successful_tests == total_tests:
    print("üéâ TOUS LES TESTS SONT R√âUSSIS!")
    print("‚úÖ Architecture MVC pr√™te pour l'int√©gration avec FastAPI")
else:
    print(f"‚ö†Ô∏è  {total_tests - successful_tests} test(s) ont √©chou√©")
    print("‚ùå Corrections n√©cessaires avant d√©ploiement")

print("=" * 60)
