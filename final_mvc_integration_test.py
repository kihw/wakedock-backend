#!/usr/bin/env python3
"""
Final comprehensive integration test for the MVC architecture
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, Any

# Add wakedock to path
sys.path.insert(0, '/Docker/code/wakedock-env/wakedock-backend')

async def test_mvc_integration():
    """Test complete MVC architecture integration"""
    
    print("üöÄ INT√âGRATION COMPL√àTE DE L'ARCHITECTURE MVC")
    print("=" * 60)
    
    success_count = 0
    total_tests = 0
    
    # Test 1: Model imports and basic functionality
    print("\n1Ô∏è‚É£ Test des mod√®les...")
    try:
        from wakedock.models.analytics_models import Metric, MetricData, MetricStatistics
        from wakedock.models.alerts_models import Alert, AlertRule
        from wakedock.models.dashboard_models import Dashboard, Widget
        from wakedock.models.containers_models import Container, Service
        from wakedock.models.authentication_models import User, Role
        
        # Test model instantiation
        metric = Metric(
            name="test_metric",
            type="gauge",
            description="Test metric for validation"
        )
        
        alert = Alert(
            name="test_alert",
            description="Test alert for validation",
            severity="warning"
        )
        
        print("‚úÖ Mod√®les import√©s et instanci√©s avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec les mod√®les: {str(e)}")
    
    total_tests += 1
    
    # Test 2: Repository layer
    print("\n2Ô∏è‚É£ Test de la couche Repository...")
    try:
        from wakedock.repositories.analytics_repository import AnalyticsRepository, MetricType
        
        # Test repository class structure
        repo_methods = [
            'get_metric_by_id', 'get_metrics_by_name', 'create_metric',
            'store_metric_data', 'get_aggregated_metrics', 'get_metric_statistics'
        ]
        
        for method in repo_methods:
            if not hasattr(AnalyticsRepository, method):
                raise AttributeError(f"Missing method: {method}")
        
        print("‚úÖ Repository layer valid√© avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec la couche Repository: {str(e)}")
    
    total_tests += 1
    
    # Test 3: Service layer
    print("\n3Ô∏è‚É£ Test de la couche Service...")
    try:
        from wakedock.services.analytics_service import AnalyticsService
        
        # Test service class structure
        service_methods = [
            'get_metric_overview', 'create_metric', 'get_metric_data',
            'calculate_statistics', 'detect_anomalies'
        ]
        
        for method in service_methods:
            if not hasattr(AnalyticsService, method):
                raise AttributeError(f"Missing method: {method}")
        
        print("‚úÖ Service layer valid√© avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec la couche Service: {str(e)}")
    
    total_tests += 1
    
    # Test 4: Controller layer
    print("\n4Ô∏è‚É£ Test de la couche Controller...")
    try:
        from wakedock.controllers.analytics_controller import AnalyticsController
        
        # Test controller class structure
        controller_methods = [
            'get_metrics', 'create_metric', 'get_metric_data',
            'get_metric_statistics', 'get_system_overview'
        ]
        
        for method in controller_methods:
            if not hasattr(AnalyticsController, method):
                raise AttributeError(f"Missing method: {method}")
        
        print("‚úÖ Controller layer valid√© avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec la couche Controller: {str(e)}")
    
    total_tests += 1
    
    # Test 5: Routes layer
    print("\n5Ô∏è‚É£ Test de la couche Routes...")
    try:
        from wakedock.routes.analytics_routes import analytics_router
        from fastapi import APIRouter
        
        # Verify router is properly configured
        if not isinstance(analytics_router, APIRouter):
            raise TypeError("analytics_router is not an APIRouter instance")
        
        # Check that routes are defined
        if not analytics_router.routes:
            raise ValueError("No routes defined in analytics_router")
        
        print(f"‚úÖ Routes layer valid√© avec succ√®s ({len(analytics_router.routes)} routes)")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec la couche Routes: {str(e)}")
    
    total_tests += 1
    
    # Test 6: Serializers
    print("\n6Ô∏è‚É£ Test des Serializers...")
    try:
        from wakedock.serializers.analytics_serializers import (
            MetricRequest, MetricResponse, MetricDataResponse,
            MetricStatisticsResponse
        )
        from pydantic import BaseModel
        
        # Test serializer structure
        serializers = [MetricRequest, MetricResponse, MetricDataResponse, MetricStatisticsResponse]
        
        for serializer in serializers:
            if not issubclass(serializer, BaseModel):
                raise TypeError(f"{serializer.__name__} is not a Pydantic model")
        
        print("‚úÖ Serializers valid√©s avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec les Serializers: {str(e)}")
    
    total_tests += 1
    
    # Test 7: Validators
    print("\n7Ô∏è‚É£ Test des Validators...")
    try:
        from wakedock.validators.analytics_validator import AnalyticsValidator
        
        # Test validator class structure
        validator_methods = [
            'validate_metric_data', 'validate_metric_name',
            'validate_time_range', 'validate_aggregation_params'
        ]
        
        for method in validator_methods:
            if not hasattr(AnalyticsValidator, method):
                raise AttributeError(f"Missing method: {method}")
        
        print("‚úÖ Validators valid√©s avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec les Validators: {str(e)}")
    
    total_tests += 1
    
    # Test 8: Core modules
    print("\n8Ô∏è‚É£ Test des modules Core...")
    try:
        from wakedock.core.database import AsyncSessionLocal
        from wakedock.core.exceptions import WakeDockException, DatabaseError
        from wakedock.core.logging import get_logger
        
        # Test core functionality
        logger = get_logger('test')
        if not logger:
            raise ValueError("Logger creation failed")
        
        print("‚úÖ Modules Core valid√©s avec succ√®s")
        success_count += 1
    except Exception as e:
        print(f"‚ùå Erreur avec les modules Core: {str(e)}")
    
    total_tests += 1
    
    # Final summary
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS D'INT√âGRATION")
    print("=" * 60)
    
    success_rate = (success_count / total_tests) * 100
    
    print(f"Tests r√©ussis: {success_count}/{total_tests}")
    print(f"Taux de r√©ussite: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("\nüéâ ARCHITECTURE MVC ENTI√àREMENT INT√âGR√âE!")
        print("‚úÖ Pr√™t pour le d√©ploiement en production")
        print("‚úÖ Tous les layers communiquent correctement")
        print("‚úÖ Structure MVC compl√®te et fonctionnelle")
    elif success_rate >= 70:
        print("\n‚ö†Ô∏è  Architecture MVC majoritairement int√©gr√©e")
        print("üîß Quelques ajustements mineurs n√©cessaires")
    else:
        print("\n‚ùå Architecture MVC n√©cessite des corrections")
        print("üîß Probl√®mes critiques √† r√©soudre")
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("1. Int√©grer les routes avec l'application FastAPI principale")
    print("2. Configurer la base de donn√©es et les migrations")
    print("3. Effectuer des tests d'int√©gration avec donn√©es r√©elles")
    print("4. D√©ployer en environnement de staging")
    print("5. Documentation et guides d'utilisation")
    
    return success_rate >= 90

if __name__ == "__main__":
    try:
        result = asyncio.run(test_mvc_integration())
        exit_code = 0 if result else 1
        sys.exit(exit_code)
    except Exception as e:
        print(f"‚ùå Erreur critique lors des tests: {str(e)}")
        sys.exit(1)
